#!/usr/bin/env python3
import argparse
import json
import os
import re
import urllib.request
from typing import Any
from typing import Dict

WS_RE = re.compile(r'\s+')
TRAILER_RE = re.compile(r' anthony explains #\d+$')
ESCAPE = {ord('\\'): r'\\', ord('_'): r'\_', ord('['): r'\[', ord(']'): r'\]'}


def _fixup_title(s: str) -> str:
    s = WS_RE.sub(' ', s)
    s = TRAILER_RE.sub('', s)
    # special case the first video
    if s.endswith(' --'):
        s = s[:-1 * len(' --')]

    return ''.join(
        # leave text alone inside `backticks`
        part.translate(ESCAPE) if i % 2 == 0 else f'`{part}`'
        for i, part in enumerate(s.strip().split('`'))
    )


def _video_link(video: Dict[str, Any], playlist_id: str) -> str:
    video_id = video['snippet']['resourceId']['videoId']
    title = _fixup_title(video['snippet']['title'])
    return f'[{title}](https://youtu.be/{video_id}?list={playlist_id})'


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('output')
    args = parser.parse_args()

    playlist_id = os.environ['YOUTUBE_PLAYLIST_ID']
    api_key = os.environ['YOUTUBE_API_KEY']

    url = 'https://www.googleapis.com/youtube/v3/playlistItems'
    params = {
        'part': 'snippet,status',
        'playlistId': playlist_id,
        'key': api_key,
        'maxResults': 50,
    }
    videos = []
    more_pages = True
    while more_pages:
        params_s = urllib.parse.urlencode(params)
        response = json.load(urllib.request.urlopen(f'{url}?{params_s}'))
        videos.extend(response['items'])
        next_page_token = response.get('nextPageToken')
        if next_page_token:
            params['pageToken'] = next_page_token
        else:
            more_pages = False

    videos = [
        video for video in videos
        if video['status']['privacyStatus'] == 'public'
    ]

    with open(args.output, 'w') as f:
        f.write('explains\n')
        f.write('========\n')
        f.write('\n')
        workflow_link = 'https://github.com/anthonywritescode/explains/actions/workflows/update.yml'  # noqa: E501
        f.write(f'[![]({workflow_link}/badge.svg)][update playlist]\n')
        f.write('\n')
        f.write('the full [playlist] is on youtube\n')
        f.write('\n')
        f.write(f'[update playlist]: {workflow_link}\n')
        playlist_link = f'https://www.youtube.com/playlist?list={playlist_id}'
        f.write(f'[playlist]: {playlist_link}\n')
        f.write('\n')

        f.write(f'0. {_video_link(videos[0], playlist_id)}\n')
        for video in videos[1:]:
            f.write(f'1. {_video_link(video, playlist_id)}\n')

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
